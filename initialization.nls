;; generate public services and green areas in the city

to class-assignment
  ; assign a colour to each third of the total households
  ask n-of round(count households / 3) households with [color = black][ 
    set color red]
  ask n-of round(count households / 3) households with [color = black][ 
    set color green]
  ask households with [color = black][
    set color yellow]
  
  ;assigns class based on color
  ask households [
    if color = yellow [
        set class "working class"
        set income ((random-gamma 9 6) * 400 * [adults] of self)
        set wealth round ((random-gamma 9 6) * 300)
        set minimum-score minimum-score-working]
      if color = green [
        set class "middle class"
        set income ((random-gamma 9 6) * 800 * [adults] of self)
        set wealth round ((random-gamma 9 6) * 650) 
        set minimum-score minimum-score-middle]
      if color = red [
        set class "upper class"
        set income ((random-gamma 9 6) * 1200 * [adults] of self)
        set wealth round ((random-gamma 9 6) * 1000) 
        set minimum-score minimum-score-upper]
  ]
end

to create-social-network
  create-links-with n-of 3 other households with [
    class = [class] of myself
  ][
    set color blue]
  if random 100 < 60 [ ; 60% probability of having friends of different class
    create-links-with n-of 1 other households with [
      class != [class] of myself
    ][
      set color yellow]
  ]
end

to services-and-greenery
  
  random-seed 1234 ;allows to always have the same pseudo-random distribution of greeneries and services
  
  ask n-of (0.01 * count patches) patches [
    set pcolor green
    sprout 1 [
      set breed services
      set shape "house"
      set color black
    ]
  ]
  
  ask n-of (0.01 * count patches) patches with [pcolor = black] [
    set pcolor green
    sprout 1 [
      set breed greeneries
      set shape "leaf"
      set color black
      set class "infrastructure"
    ]
    ask n-of (random 1) neighbors [
      set pcolor green
      sprout 1 [
        set breed greeneries
        set shape "leaf"
        set color black
        set class "infrastructure"
    ]
    ] 
  ]
  
  random-seed new-seed ;this is based on current time and is always different
  
end

to social-housing-creation
  
  ; create house patches as social housing
  ; put lower prices for these patches by setting a social housing markup at 0.5
  ; add access rules
  ifelse clustered-social-housing [
     if fixed-distr-social-housing [
    random-seed 1234] ; always generates the same pseudo-random numbers: the same patches will be social housing
    let number-clusters round(number-socialhousing / 5)
    ask n-of number-clusters patches with [pcolor != green] [
      set socialhousing-markup 0.6
      set pcolor orange
      set access ["working class"]
      ask neighbors4 [
        set socialhousing-markup 0.6
        set pcolor orange
        set access ["working class"]
      ]
    ]
    random-seed new-seed ;restores the "randomness" by assigning a seed based on current datetime 
  ][
    if fixed-distr-social-housing [
       random-seed 1234] ; always generates the same pseudo-random numbers: the same patches will be social housing
    ask n-of number-socialhousing patches with [pcolor != green] [
      set socialhousing-markup 0.6
      set pcolor orange
      set access "working class"]
   random-seed new-seed ;restores the "randomness" by assigning a seed based on current datetime 
  ]
  
end